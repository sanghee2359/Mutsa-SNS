plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	// jacoco
	id 'jacoco' // 이 부분 추가
}

group = 'com.first'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	// swagger
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	// token
	implementation  group: 'io.jsonwebtoken', name:'jjwt',version:'0.9.1'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}
test {
	useJUnitPlatform()				// JUnit5를 사용하기 위한 설정
	finalizedBy 'jacocoTestReport'  // Test 이후 커버리지가 동작하도록 finalizedBy 추가
}

jacoco {
	toolVersion = '0.8.8'   // 이 부분 전체 추가
}
// 코드 커버리지 진행 후 결과를 리포트로 저장
jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true

		// html 파일 위치 지정
		html.destination file('build/reports/myReport.html')
	}
	// 리포트 작성 시 특정 파일 제외
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/FirstmissionBulletinBoardApplication*',
							'**/*Request*',
							'**/*Response*',
							'**/Hello*',
							'**/Swagger*',
							'**/EncrypterConfig*',
							'**/JpaAuditingConfig*'

					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

// 검증 단계
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 활성화
			element = 'CLASS' // 클래스 단위로 커버리지 체크
			// includes = []

			// 라인 커버리지 제한을 80%로 설정
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 브랜치 커버리지 제한을 80%로 설정
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}
			excludes = [
					'**/FirstmissionBulletinBoardApplication*',
					'**/*Request*',
					'**/*Response*',
					'**/Hello*',
					'**/Swagger*',
					'**/EncrypterConfig*',
					'**/JpaAuditingConfig*'
			]
		}
	}
}